package com.image.collection.sql;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "COLLECTION_MODEL".
 */
public class CollectionModelDao extends AbstractDao<CollectionModel, String> {

    public static final String TABLENAME = "COLLECTION_MODEL";

    public CollectionModelDao(DaoConfig config) {
        super(config);
    }


    public CollectionModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECTION_MODEL\" (" + //
                "\"URL\" TEXT PRIMARY KEY NOT NULL );"); // 0: url
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECTION_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CollectionModel entity) {
        stmt.clearBindings();

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CollectionModel entity) {
        stmt.clearBindings();

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset) ? null : cursor.getString(offset);
    }

    @Override
    public CollectionModel readEntity(Cursor cursor, int offset) {
        return new CollectionModel( //
                cursor.isNull(offset) ? null : cursor.getString(offset) // url
        );
    }

    @Override
    public void readEntity(Cursor cursor, CollectionModel entity, int offset) {
        entity.setUrl(cursor.isNull(offset) ? null : cursor.getString(offset));
    }

    @Override
    protected final String updateKeyAfterInsert(CollectionModel entity, long rowId) {
        return entity.getUrl();
    }

    @Override
    public String getKey(CollectionModel entity) {
        if (entity != null) {
            return entity.getUrl();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CollectionModel entity) {
        return entity.getUrl() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity CollectionModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", true, "URL");
    }

}
